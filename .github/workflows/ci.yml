name: Ansible-Link CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ansible-link-ci:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Update configuration
      run: |
        sed -i '/^playbook_dir:/d' config.yml
        sed -i '/^inventory_file:/d' config.yml
        sed -i '/^job_storage_dir:/d' config.yml
        sed -i '/^log_level:/d' config.yml
        sed -i '/^playbook_whitelist:/d' config.yml

        echo "playbook_dir: './test_playbooks'" >> config.yml
        echo "inventory_file: './test_inventory.ini'" >> config.yml
        echo "job_storage_dir: './test_job_storage'" >> config.yml
        echo "log_level: 'DEBUG'" >> config.yml  
        echo "playbook_whitelist:" >> config.yml
        echo "  - test_.+\.yml$" >> config.yml
    - name: create test files/folders
      run: | 
        mkdir -p test_playbooks test_job_storage
        touch test_inventory.ini
    - name: create test playbook
      run: |
        cat << EOF > test_playbooks/test_playbook.yml
        ---
        - name: Test Playbook
          hosts: localhost
          connection: local
          tasks:
            - name: Print a message
              debug:
                msg: "This is a test playbook"
        EOF
    - name: show structure and files
      run: |
        ls -R
        cat config.yml
        cat test_playbooks/test_playbook.yml
    - name: run tests
      run: |
        python -m unittest discover tests

  build-artifact:
    needs: ansible-link-ci
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - name: Get version
      id: get_version
      run: |
        cd src && echo "VERSION=$(python -c "from version import VERSION; print(VERSION)")" >> $GITHUB_ENV
    - name: Create zip artifact
      run: |
        zip -r ansible-link-${{ env.VERSION }}.zip src -x "*.pyc" "*__pycache__*" "test_*"
    - name: Create hash file
      run: |
        sha256sum ansible-link-${{ env.VERSION }}.zip > ansible-link-${{ env.VERSION }}.sha256
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ansible-link-${{ env.VERSION }}
        path: |
          ansible-link-${{ env.VERSION }}.zip
          ansible-link-${{ env.VERSION }}.sha256
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ansible-link-${{ env.VERSION }}.zip
        asset_name: ansible-link-${{ env.VERSION }}.zip
        asset_content_type: application/zip
    - name: Upload Hash File
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ansible-link-${{ env.VERSION }}.sha256
        asset_name: ansible-link-${{ env.VERSION }}.sha256
        asset_content_type: text/plain